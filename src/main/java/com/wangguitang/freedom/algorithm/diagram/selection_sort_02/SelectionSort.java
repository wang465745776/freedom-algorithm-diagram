package com.wangguitang.freedom.algorithm.diagram.selection_sort_02;

import java.util.Arrays;

/**
 * 选择排序
 *
 * @author freedom wang
 * @date 2019-11-02 17:29:41
 */
public class SelectionSort {

    /**
     * 对给定的数组使用选择排序算法进行升序排序
     *
     * @author freedom wang
     * @date 2019-11-03 11:36:34
     */
    public static int[] selectionSort(int[] list) {
        for (int i = 0; i < list.length - 1; i++) {
            int minIndex = i;

            for (int j = i + 1; j < list.length; j++) {
                if(list[j] < list[minIndex]){
                    minIndex = j;
                }
            }

            if (minIndex != i) {
                int temp = list[i];
                list[i] = list[minIndex];
                list[minIndex] = temp;
            }
        }

        return list;
    }


    public static void main(String[] args) {
        System.out.println(Arrays.toString(selectionSort(new int[]{3, 1, 5, -1, 2})));

        /* 2.1 假设你要编写一个记账的应用程序。
        你每天都将所有的支出记录下来，并在月底统计支出，算算当月花了多少钱。因此，
        你执行的插入操作很多，但读取操作很少。该使用数组还是链表呢？

        解答：插入操作很多，那么就需要选中在插入操作时，时间复杂度较低的数据结构。由先前的学习我们可以知道，在插入
        的适合，链表的时间复杂度为：O(1)，而数组的时间复杂度为：O(n)。所以我们选链表
        */


        /*

        2.2 假设你要为饭店创建一个接受顾客点菜单的应用程序。这个应用程序存储一系列点菜
        单。服务员添加点菜单，而厨师取出点菜单并制作菜肴。这是一个点菜单队列：服务
        员在队尾添加点菜单，厨师取出队列开头的点菜单并制作菜肴。
        你使用数组还是链表来实现这个队列呢？（提示：链表擅长插入和删除，而数组擅长
        随机访问。在这个应用程序中，你要执行的是哪些操作呢？）

        在队尾新增，在队头删除，表示这个队列需要较多的插入和删除操作，而没有提到需要随机访问的操作，所以选择链表

         */


        /*
        2.3 我们来做一个思考实验。假设Facebook记录一系列用户名，每当有用户试图登录
        Facebook时，都查找其用户名，如果找到就允许用户登录。由于经常有用户登录
        Facebook，因此需要执行大量的用户名查找操作。假设Facebook使用二分查找算法，
        而这种算法要求能够随机访问——立即获取中间的用户名。考虑到这一点，应使用数
        组还是链表来存储用户名呢？

        如果需要随机访问的能力，需要使用数组

         */

        /*

        2.4 经常有用户在Facebook注册。假设你已决定使用数组来存储用户名，在插入方面数组
            有何缺点呢？具体地说，在数组中添加新用户将出现什么情况？

            数组的存储在内存中时连续的，如果没有足够的连续长度的内存空间，那么数组插入时，会发生复制操作，
            时间复杂度为：O(n)。如果内存不足，还将出现新增失败的问题

         */

        /*
        2.5 实际上，Facebook存储用户信息时使用的既不是数组也不是链表。假设Facebook使用
            的是一种混合数据：链表数组。这个数组包含26个元素，每个元素都指向一个链表。
            例如，该数组的第一个元素指向的链表包含所有以A打头的用户名，第二个元素指向的
            链表包含所有以B打头的用户名，以此类推。
            假设Adit B在Facebook注册，而你需要将其加入前述数据结构中。因此，你访问数组的
            第一个元素，再访问该元素指向的链表，并将Adit B添加到这个链表末尾。现在假设你
            要查找Zakhir H。因此你访问第26个元素，再在它指向的链表（该链表包含所有以z打
            头的用户名）中查找Zakhir H。
            请问，相比于数组和链表，这种混合数据结构的查找和插入速度更慢还是更快？你不
            必给出大O运行时间，只需指出这种新数据结构的查找和插入速度更快还是更慢。

            对于查找操作，数组链表会数组会更慢一些，但却比链表要更快。对于插入操作，比数组要更快，跟链表
            速度相同。
         */
    }
}
